name: Release

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      force:
        description: 'force release'
        required: false
        type: boolean
        default: false

jobs:
  check-pr-count:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check PR count
        id: check
        run: |
          if [ "${{ github.event.inputs.force }}" = "true" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          PR_COUNT=$(git log --merges --since="$(date -d '7 days ago' +%Y-%m-%d)" | grep -c "Merge pull request")
          if [ $PR_COUNT -ge 5 ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-pr-count
    if: needs.check-pr-count.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-release
      run: cargo install cargo-release

    - name: Configure Git
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'github-actions@github.com'

    - name: Create Release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cargo release --execute --no-confirm --no-publish --no-push --no-tag --no-verify
        VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[0].version')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Fetch all tags and ensure we have the latest state
        git fetch --tags -f origin
        
        # Check if tag exists and if it points to a different commit
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          if [ "$(git rev-parse "v$VERSION")" != "$(git rev-parse HEAD)" ]; then
            echo "Tag v$VERSION exists but points to a different commit. Deleting and recreating..."
            git tag -d "v$VERSION"
            git push origin ":refs/tags/v$VERSION"
          else
            echo "Tag v$VERSION already exists and points to the correct commit. Skipping tag creation."
            exit 0
          fi
        fi
        
        # Create and push the new tag
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"
        # wait for tag to be propagated to GitHub
        sleep 5

    - name: Build Release
      run: cargo build --release

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.release.outputs.version }}
        files: |
          target/release/gget
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
